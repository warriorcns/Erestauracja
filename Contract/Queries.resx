<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddCategory" xml:space="preserve">
    <value>INSERT INTO `category`(`restaurantId`, `categoryName`, `categoryDescription`, `priceOption`, `nonPriceOption`, `nonPriceOption2`) VALUES (@restaurantID,@categoryName,@categoryDescription,@priceOption,@nonPriceOption,@nonPriceOption2)</value>
  </data>
  <data name="AddEmptyContent" xml:space="preserve">
    <value>INSERT INTO `rest_page_content`(`menagerId`, `restaurantId`) VALUES ((SELECT `id` FROM `users` WHERE `login` = @menager),(SELECT `id` FROM `restaurants` WHERE `userId`=(SELECT `id` FROM `users` WHERE `login` = @login)))</value>
  </data>
  <data name="AddProduct" xml:space="preserve">
    <value>INSERT INTO `products`(`restaurantId`, `categoryId`, `name`, `description`, `price`, `priceOption`, `creationDate`, `isAvailable`, `isEnabled`) VALUES (@restaurantId, @categoryId, @name, @description, @price, @priceOption,@creationDate, @isAvailable, @isEnabled)</value>
  </data>
  <data name="AddRestaurant" xml:space="preserve">
    <value>INSERT INTO `restaurants`(`name`, `displayName`, `address`, `townId`, `countryId`, `telephone`, `nip`, `regon`, `inputsCount`, `averageRating`, `menagerId`, `deliveryTime`, `userId`, `isEnabled`, `latitude`, `longitude`) VALUES (@name, @displayName, @address, @townId, (SELECT `id` FROM `countries` WHERE `name` = @country), @telephone, @nip, @regon, @inputsCount, @averageRating, (SELECT `id` FROM `users` WHERE `login` = @menager), @deliveryTime, (SELECT `id` FROM `users` WHERE `login` = @login), @isEnabled, @latitude, @longitude)</value>
  </data>
  <data name="AddUsersToRoles" xml:space="preserve">
    <value>INSERT INTO `users_in_roles`(`userID`, `roleID`) VALUES ((SELECT `id` FROM `users` WHERE `login`=@login), (SELECT `id` FROM `roles` WHERE `rolename` = @rolename))</value>
  </data>
  <data name="AddUserToRestaurant" xml:space="preserve">
    <value>INSERT INTO `employees_in_restaurants`(`userId`, `restaurantId`) VALUES (@userId, @restaurantId)</value>
  </data>
  <data name="AllUsersCount" xml:space="preserve">
    <value>SELECT Count(*) FROM `users`</value>
  </data>
  <data name="ChangePassword" xml:space="preserve">
    <value>UPDATE `users` SET `password` = @password, `lastPasswordChangedDate` = @lastPasswordChangedDate WHERE `login` = @login</value>
  </data>
  <data name="ChangePasswordQuestionAndAnswer" xml:space="preserve">
    <value>UPDATE `users` SET `passwordQuestion` = @question, `passwordAnswer` = @answer WHERE `login` = @login</value>
  </data>
  <data name="CreateRole" xml:space="preserve">
    <value>INSERT INTO `roles`(`rolename`) VALUES (@rolename)</value>
  </data>
  <data name="CreateUser" xml:space="preserve">
    <value>INSERT INTO `users`(`login`, `password`, `email`, `name`, `surname`, `address`, `townID`, `countryID`, `birthdate`, `sex`, `telephone`, `comment`, `passwordQuestion`, `passwordAnswer`, `isApproved`, `lastActivityDate`, `lastLoginDate`, `lastPasswordChangedDate`, `creationDate`, `isOnLine`, `isLockedOut`, `lastLockedOutDate`, `failedPasswordAttemptCount`, `failedPasswordAttemptWindowStart`, `failedPasswordAnswerAttemptCount`, `failedPasswordAnswerAttemptWindowStart`) VALUES(@login, @password, @email, @name, @surname, @address, @townID, (SELECT `id` FROM `countries` WHERE `name`=@country), @birthdate, @sex, @telephone, @comment, @passwordQuestion, @passwordAnswer, @isApproved, @lastActivityDate, @lastLoginDate, @lastPasswordChangedDate, @creationDate, @isOnLine, @isLockedOut, @lastLockedOutDate, @failedPasswordAttemptCount, @failedPasswordAttemptWindowStart, @failedPasswordAnswerAttemptCount, @failedPasswordAnswerAttemptWindowStart)</value>
  </data>
  <data name="DeleteCategory" xml:space="preserve">
    <value>DELETE FROM `category` WHERE `id`=@id AND `restaurantId`=@restaurantId</value>
  </data>
  <data name="DeleteRole" xml:space="preserve">
    <value>DELETE FROM `roles` WHERE `rolename` = @rolename</value>
  </data>
  <data name="DeleteUser" xml:space="preserve">
    <value>DELETE FROM `users`  WHERE `login` = @login</value>
  </data>
  <data name="DeleteUsersInRole" xml:space="preserve">
    <value>DELETE FROM `users_in_roles` WHERE `roleID` = (SELECT `id` FROM `roles` WHERE `rolename` = @rolename)</value>
  </data>
  <data name="DisableProduct" xml:space="preserve">
    <value>UPDATE `products` SET `isAvailable`=@isAvailable,`isEnabled`=@isEnabled WHERE `categoryId`=@categoryId AND `restaurantId`=@restaurantId</value>
  </data>
  <data name="EditCategory" xml:space="preserve">
    <value>UPDATE `category` SET `categoryName`=@categoryName,`categoryDescription`=@categoryDescription,`priceOption`=@priceOption,`nonPriceOption`=@nonPriceOption,`nonPriceOption2`=@nonPriceOption2 WHERE `restaurantId`=@restaurantId AND `id` = @id</value>
  </data>
  <data name="EditContactPage" xml:space="preserve">
    <value>UPDATE `rest_page_content` SET `contact`=@contact WHERE `menagerId` = (SELECT `id` FROM `users` WHERE `login` = @managerLogin) AND `restaurantId`=@id</value>
  </data>
  <data name="EditDeliveryPage" xml:space="preserve">
    <value>UPDATE `rest_page_content` SET `delivery`=@delivery WHERE `menagerId` = (SELECT `id` FROM `users` WHERE `login` = @managerLogin) AND `restaurantId`=@id</value>
  </data>
  <data name="EditEventsPage" xml:space="preserve">
    <value>UPDATE `rest_page_content` SET `events`=@events WHERE `menagerId` = (SELECT `id` FROM `users` WHERE `login` = @managerLogin) AND `restaurantId`=@id</value>
  </data>
  <data name="EditMainPage" xml:space="preserve">
    <value>UPDATE `rest_page_content` SET `description`=@description,`foto`=@foto,`specialOffers`=@specialOffers WHERE `menagerId` = (SELECT `id` FROM `users` WHERE `login` = @managerLogin) AND `restaurantId`=@id</value>
  </data>
  <data name="EditProduct" xml:space="preserve">
    <value>UPDATE `products` SET `categoryId` = @categoryId,`name` = @name,`description` = @description,`price` = @price,`priceOption` = @priceOption,`isAvailable` = @isAvailable,`isEnabled` = @isEnabled WHERE `restaurantId` = @restaurantId AND `id` = @id</value>
  </data>
  <data name="EditRestaurant" xml:space="preserve">
    <value>UPDATE `restaurants` SET `name`=@name,`displayName`=@displayName,`address`=@address,`townId`=@townId,`countryId`= (SELECT `id` FROM `countries` WHERE `name` = @country),`telephone`=@telephone,`nip`=@nip,`regon`=@regon,`deliveryTime`=@deliveryTime, `isEnabled`=@isEnabled,`latitude`=@latitude,`longitude`=@longitude WHERE `menagerId`= (SELECT `id` FROM `users` WHERE `login` = @menager) AND `id`=@id</value>
  </data>
  <data name="FindUsersByEmail" xml:space="preserve">
    <value>SELECT `login`, `email`, `passwordQuestion`, `comment`, `isApproved`, `isLockedOut`, `creationDate`, `lastLoginDate`,`lastActivityDate`, `lastPasswordChangedDate`, `llastLockedOutDate` FROM `users` WHERE `email` LIKE @email ORDER BY `login` Asc</value>
  </data>
  <data name="FindUsersByName" xml:space="preserve">
    <value>SELECT `id`, `login`,  `email`, `name`, `surname`, `address`, `townID`, `country`, `birthdate`, `sex`, `telephone`,  `comment`, `passwordQuestion`,  `isApproved`, `lastActivityDate`, `lastLoginDate`, `lastPasswordChangedDate`, `creationDate`,  `isLockedOut`, `lastLockedOutDate`   FROM `users` WHERE `login` LIKE @login ORDER BY `login` Asc</value>
  </data>
  <data name="FindUsersInRole" xml:space="preserve">
    <value>SELECT `login` FROM `users` WHERE `id` IN (SELECT `userID` FROM `users_in_roles` WHERE `userID` IN (SELECT `id` FROM `users` WHERE `login` LIKE @login) AND `roleID` = (SELECT `id` FROM `roles` WHERE `rolename` = @rolename))</value>
  </data>
  <data name="GetAllProducts" xml:space="preserve">
    <value>SELECT `id`, `restaurantId`, `categoryId`, `name`, `description`,`price`, `priceOption`, `creationDate`, `isAvailable`, `isEnabled` FROM `products` WHERE `restaurantId`=@restaurantId</value>
  </data>
  <data name="GetAllRoles" xml:space="preserve">
    <value>SELECT `rolename` FROM `roles`</value>
  </data>
  <data name="GetAllUsers" xml:space="preserve">
    <value>SELECT u.`id`, u.`login`, u.`email`, u.`name`, u.`surname`, u.`address`, t.`town_name`, t.`postal_code`,c.`name`, u.`birthdate`, u.`sex`, u.`telephone`, u.`comment`, u.`passwordQuestion`, u.`isApproved`, u.`lastActivityDate`, u.`lastLoginDate`, u.`lastPasswordChangedDate`, u.`creationDate`, u.`isLockedOut`, u.`lastLockedOutDate` FROM `users` u JOIN `countries` c ON u.`countryID` = c.`id` JOIN `towns` t ON u.`townID` = t.`id` ORDER BY  u.`login` ASC</value>
  </data>
  <data name="GetCategories" xml:space="preserve">
    <value>SELECT `id`, `restaurantId`, `categoryName`, `categoryDescription`, `priceOption`, `nonPriceOption`, `nonPriceOption2` FROM `category` WHERE `restaurantId` = @restaurantId</value>
  </data>
  <data name="GetCategory" xml:space="preserve">
    <value>SELECT `id`, `restaurantId`, `categoryName`, `categoryDescription`, `priceOption`, `nonPriceOption`, `nonPriceOption2` FROM `category` WHERE `restaurantId` = @restaurantId AND `id` = @id</value>
  </data>
  <data name="GetClientProducts" xml:space="preserve">
    <value>SELECT `id`, `restaurantId`, `categoryId`, `name`, `description`, `price`, `priceOption`, `creationDate`, `isAvailable`, `isEnabled` FROM `products` WHERE `restaurantId`=@restaurantId AND `categoryId`=@categoryId AND `isAvailable`=1 AND `isEnabled`=1</value>
  </data>
  <data name="GetContactPage" xml:space="preserve">
    <value>SELECT `contact` FROM `rest_page_content` WHERE `menagerId` = (SELECT `id` FROM `users` WHERE `login` = @managerLogin) AND `restaurantId`=@id</value>
  </data>
  <data name="GetContactPageUser" xml:space="preserve">
    <value>SELECT `contact` FROM `rest_page_content` WHERE `restaurantId`=@id</value>
  </data>
  <data name="GetCountriesList" xml:space="preserve">
    <value>SELECT `name` FROM `countries`</value>
  </data>
  <data name="GetDataForGeolock" xml:space="preserve">
    <value>SELECT `town_name`, `postal_code`, `community`, `district`, `province` FROM `towns` WHERE `id`=@id</value>
  </data>
  <data name="GetDeliveryPage" xml:space="preserve">
    <value>SELECT `delivery` FROM `rest_page_content` WHERE `menagerId` = (SELECT `id` FROM `users` WHERE `login` = @managerLogin) AND `restaurantId`=@id</value>
  </data>
  <data name="GetDeliveryPageUser" xml:space="preserve">
    <value>SELECT `delivery` FROM `rest_page_content` WHERE `restaurantId`=@id</value>
  </data>
  <data name="GetEmailByLogin" xml:space="preserve">
    <value>SELECT `email` FROM `users` WHERE `login` = @login</value>
  </data>
  <data name="GetEventsPage" xml:space="preserve">
    <value>SELECT `events` FROM `rest_page_content` WHERE `menagerId` = (SELECT `id` FROM `users` WHERE `login` = @managerLogin) AND `restaurantId`=@id</value>
  </data>
  <data name="GetEventsPageUser" xml:space="preserve">
    <value>SELECT `events` FROM `rest_page_content` WHERE `restaurantId`=@id</value>
  </data>
  <data name="GetFailureCount" xml:space="preserve">
    <value>SELECT `failedPasswordAttemptCount`, `failedPasswordAttemptWindowStart`, `failedPasswordAnswerAttemptCount`, `failedPasswordAnswerAttemptWindowStart` FROM `users` WHERE `login` = @login</value>
  </data>
  <data name="GetMainPage" xml:space="preserve">
    <value>SELECT `description`, `foto`, `specialOffers` FROM `rest_page_content` WHERE `menagerId` = (SELECT `id` FROM `users` WHERE `login` = @managerLogin) AND `restaurantId`=@id</value>
  </data>
  <data name="GetMainPageUser" xml:space="preserve">
    <value>SELECT `description`, `foto`, `specialOffers` FROM `rest_page_content` WHERE `restaurantId`=@id</value>
  </data>
  <data name="GetMoreMoreTowns" xml:space="preserve">
    <value>SELECT `id`, `postal_code`, `town_name`, `province`, `district`, `community`, `latitude`, `longitude` FROM `towns` WHERE `town_name` REGEXP @townName OR `postal_code` = @postalCode</value>
  </data>
  <data name="GetMoreTowns" xml:space="preserve">
    <value>SELECT `id`, `postal_code`, `town_name`, `province`, `district`, `community`, `latitude`, `longitude` FROM `towns` WHERE `town_name` LIKE @townName AND `postal_code` = @postalCode</value>
  </data>
  <data name="GetNumberOfUsersOnline" xml:space="preserve">
    <value>SELECT Count(*) FROM `users` WHERE `lastActivityDate` &gt; @lastActivityDate OR `lastLoginDate` &gt; @lastActivityDate</value>
  </data>
  <data name="GetPassword" xml:space="preserve">
    <value>SELECT `password`, `passwordAnswer`, `isLockedOut` FROM `users` WHERE `login` = @login</value>
  </data>
  <data name="GetPasswordAnswer" xml:space="preserve">
    <value>SELECT `passwordAnswer`, `isLockedOut` FROM `users` WHERE `login` = @login</value>
  </data>
  <data name="GetPersonnel" xml:space="preserve">
    <value>SELECT u.`id`, u.`login`, u.`email`, u.`name`, u.`surname`, u.`address`, t.`town_name`, t.`postal_code`, c.`name`, u.`birthdate`, u.`sex`, u.`telephone`, u.`comment`, u.`passwordQuestion`, u.`isApproved`, u.`lastActivityDate`, u.`lastLoginDate`, u.`lastPasswordChangedDate`, u.`creationDate`, u.`isLockedOut`, u.`lastLockedOutDate` FROM `users` u JOIN `countries` c ON u.`countryID` = c.`id` JOIN `towns` t ON u.`townID` = t.`id` WHERE u.`id` IN (SELECT e.`userId` FROM `employees_in_restaurants` e WHERE e.`restaurantId` = @restaurantId)</value>
  </data>
  <data name="GetProduct" xml:space="preserve">
    <value>SELECT `id`, `restaurantId`, `categoryId`, `name`, `description`, `price`, `priceOption`, `creationDate`, `isAvailable`, `isEnabled` FROM `products` WHERE `id` = @id AND `restaurantId` = @restaurantId</value>
  </data>
  <data name="GetProducts" xml:space="preserve">
    <value>SELECT `id`, `restaurantId`, `categoryId`, `name`, `description`, `price`, `priceOption`, `creationDate`, `isAvailable`, `isEnabled` FROM `products` WHERE `restaurantId`=@restaurantId AND `categoryId`=@categoryId</value>
  </data>
  <data name="GetRestaurant" xml:space="preserve">
    <value>SELECT x.`id`, x.`name`, x.`displayName`, x.`address`, t.`town_name`, t.`postal_code`, y.`name`, x.`telephone`, x.`nip`, x.`regon`, x.`deliveryTime`, x.`isEnabled` FROM `restaurants` x JOIN `countries` y ON x.`countryId` = y.`id` JOIN `towns` t ON x.`townId` = t.`id` WHERE `menagerId` = (SELECT `id` FROM `users` WHERE `login` = @managerLogin) AND x.`id` = @id</value>
  </data>
  <data name="GetRestaurantByTown" xml:space="preserve">
    <value>SELECT x.`id`, x.`displayName`, y.`town_name`, y.`id` FROM `restaurants` x JOIN `towns` y ON x.`townId` = y.`id` WHERE y.`town_name` LIKE @townName AND x.`isEnabled` = @isEnabled</value>
  </data>
  <data name="GetRestaurantsByManagerLogin" xml:space="preserve">
    <value>SELECT x.`id`, x.`name`, x.`displayName`, x.`address`, t.`town_name`, t.`postal_code`, y.`name`, x.`telephone`, x.`nip`, x.`regon`, x.`inputsCount`, x.`averageRating`, x.`menagerId`, x.`deliveryTime`, x.`userId`, x.`isEnabled`, u.`login`, u.`email`, u.`isApproved`, u.`lastActivityDate`, u.`creationDate`, u.`isLockedOut`, u.`lastLockedOutDate` FROM `restaurants` x JOIN `countries` y ON x.`countryId` = y.`id` JOIN `towns` t ON x.`townId` = t.`id` JOIN `users` u ON x.`userId` = u.`id` WHERE `menagerId` = (SELECT `id` FROM `users` WHERE `login` = @managerLogin)</value>
  </data>
  <data name="GetRolesForUser" xml:space="preserve">
    <value>SELECT `rolename` FROM `roles` WHERE `id` IN (SELECT `roleID` FROM `users_in_roles` WHERE `userID` = (SELECT `id` FROM `users` WHERE `login` = @login))</value>
  </data>
  <data name="GetTowns" xml:space="preserve">
    <value>SELECT `id`, `postal_code`, `town_name`, `province`, `district`, `community`, `latitude`, `longitude` FROM `towns` WHERE `town_name` LIKE @townName AND `postal_code` = @postalCode</value>
  </data>
  <data name="GetUserByID" xml:space="preserve">
    <value>SELECT u.`id`, u.`login`, u.`email`, u.`name`, u.`surname`, u.`address`, t.`town_name`, t.`postal_code`, c.`name`, u.`birthdate`, u.`sex`, u.`telephone`, u.`comment`, u.`passwordQuestion`, u.`isApproved`, u.`lastActivityDate`, u.`lastLoginDate`, u.`lastPasswordChangedDate`, u.`creationDate`, u.`isLockedOut`, u.`lastLockedOutDate` FROM `users` u JOIN `countries` c
ON u.`countryID` = c.`id` JOIN `towns` t ON u.`townID` = t.`id` WHERE u.`id` = @id</value>
  </data>
  <data name="GetUserByLogin" xml:space="preserve">
    <value>SELECT u.`id`, u.`login`, u.`email`, u.`name`, u.`surname`, u.`address`, t.`town_name`, t.`postal_code`, c.`name`, u.`birthdate`, u.`sex`, u.`telephone`, u.`comment`, u.`passwordQuestion`, u.`isApproved`, u.`lastActivityDate`, u.`lastLoginDate`, u.`lastPasswordChangedDate`, u.`creationDate`, u.`isLockedOut`, u.`lastLockedOutDate` FROM `users` u JOIN `countries` c
ON u.`countryID` = c.`id` JOIN `towns` t ON u.`townID` = t.`id` WHERE u.`login` = @login</value>
  </data>
  <data name="GetUserCountByEmail" xml:space="preserve">
    <value>SELECT Count(*) FROM `users` WHERE `email` LIKE @email</value>
  </data>
  <data name="GetUserCountByLogin" xml:space="preserve">
    <value>SELECT Count(*) FROM `users` WHERE `login` LIKE @login</value>
  </data>
  <data name="GetUserNameByEmail" xml:space="preserve">
    <value>SELECT `login` FROM `users` WHERE `email` = @email</value>
  </data>
  <data name="GetUserQuestion" xml:space="preserve">
    <value>SELECT `passwordQuestion`, `isLockedOut` FROM `users` WHERE `login` = @login</value>
  </data>
  <data name="GetUsersInRole" xml:space="preserve">
    <value>SELECT `login` FROM `users` WHERE `id` IN (SELECT `userID` FROM `users_in_roles` WHERE `roleID` = (SELECT `id` FROM `roles` WHERE `rolename` = @rolename))</value>
  </data>
  <data name="IsRestaurantOwner" xml:space="preserve">
    <value>SELECT 0 FROM `restaurants` WHERE `id` = @restaurantID AND `menagerId` = (SELECT `id` FROM `users` WHERE `login` LIKE @managerLogin)</value>
  </data>
  <data name="IsUserInRole" xml:space="preserve">
    <value>SELECT COUNT(*) FROM `users_in_roles` WHERE `userID` = (SELECT `id` FROM `users` WHERE `login`=@login) AND `roleID` = (SELECT `id` FROM `roles` WHERE `rolename` = @rolename)</value>
  </data>
  <data name="LockOutUser" xml:space="preserve">
    <value>UPDATE `users` SET `isLockedOut` = @isLockedOut, `lastLockedOutDate` = @lastLockedOutDate WHERE `login` = @login</value>
  </data>
  <data name="RemoveUsersFromRoles" xml:space="preserve">
    <value>DELETE FROM `users_in_roles` WHERE `userID` = (SELECT `id` FROM `users` WHERE `login`=@login) AND `roleID` = (SELECT `id` FROM `roles` WHERE `rolename` = @rolename)</value>
  </data>
  <data name="ResetPassword" xml:space="preserve">
    <value>UPDATE `users` SET `password` = @password, `lastPasswordChangedDate` = @lastPasswordChangedDate WHERE `login` = @login AND `isLockedOut` = @isLockedOut</value>
  </data>
  <data name="RoleExists" xml:space="preserve">
    <value>SELECT COUNT(*) FROM `roles` WHERE `rolename` = @rolename</value>
  </data>
  <data name="SetFailedPasswordAnswerAttemptCount" xml:space="preserve">
    <value>UPDATE `users`  SET `failedPasswordAnswerAttemptCount` = @count WHERE `login` = @login</value>
  </data>
  <data name="SetFailedPasswordAttemptCount" xml:space="preserve">
    <value>UPDATE `users` SET `failedPasswordAttemptCount` = @count WHERE `login` = @login</value>
  </data>
  <data name="UnlockUser" xml:space="preserve">
    <value>UPDATE `users` SET `isLockedOut` = @isLockedOut, `lastLockedOutDate` = @lastLockedOutDate WHERE `login` = @login</value>
  </data>
  <data name="UpdateFailedPasswordAnswerAttempt" xml:space="preserve">
    <value>UPDATE `users` SET `failedPasswordAnswerAttemptCount` = @count, `failedPasswordAnswerAttemptWindowStart` = @windowStart WHERE `login` = @login</value>
  </data>
  <data name="UpdateFailedPasswordAttempt" xml:space="preserve">
    <value>UPDATE `users` SET `failedPasswordAttemptCount` = @count, `failedPasswordAttemptWindowStart` = @windowStart WHERE `login` = @login</value>
  </data>
  <data name="UpdateUser" xml:space="preserve">
    <value>UPDATE `users` SET `name` = @name, `surname` = @surname, `address` = @address, `townID` = (SELECT `id` FROM `towns` WHERE `town_name` LIKE @town_name AND `postal_code` LIKE @postal_code), `countryID` = (SELECT `id` FROM `countries` WHERE `name`=@country), `birthdate` = @birthdate, `sex` = @sex, `telephone` = @telephone, `comment` = @comment, `isApproved` = @isApproved  WHERE `login` = @login</value>
  </data>
  <data name="UpdateUserActivityByID" xml:space="preserve">
    <value>UPDATE `users` SET `lastActivityDate` = @lastActivityDate WHERE `id` = @id</value>
  </data>
  <data name="UpdateUserActivityByLogin" xml:space="preserve">
    <value>UPDATE `users` SET `lastActivityDate` = @lastActivityDate WHERE `login` = @login</value>
  </data>
  <data name="UpdateUserLoginDate" xml:space="preserve">
    <value>UPDATE `users` SET `lastLoginDate`= @lastLoginDate WHERE `login` = @login</value>
  </data>
  <data name="ValidateUser" xml:space="preserve">
    <value>SELECT `password`, `isApproved` FROM `users` WHERE `login` = @login AND `isLockedOut` = @isLockedOut</value>
  </data>
  <data name="RestaurantsFromCity" xml:space="preserve">
    <value>SELECT x.`id`, x.`displayName`, x.`address`, t.`town_name`, t.`postal_code`, y.`name`, x.`telephone`, x.`inputsCount`, x.`averageRating`, x.`deliveryTime`, u.`creationDate`, x.`latitude`, x.`longitude` FROM `restaurants` x JOIN `countries` y ON x.`countryId` = y.`id` JOIN `towns` t ON x.`townId` = t.`id` JOIN `users` u ON x.`userId` = u.`id` WHERE x.`isEnabled`=@isEnabled AND x.`townId` IN (SELECT `id` FROM `towns` WHERE `town_name` LIKE @cityName)</value>
  </data>
  <data name="GetTopRestaurant" xml:space="preserve">
    <value>SELECT x.`id`, x.`displayName`, x.`address`, t.`town_name`, t.`postal_code`, x.`telephone` FROM `restaurants` x JOIN `towns` t ON x.`townId` = t.`id` JOIN `users` u ON x.`userId` = u.`id` WHERE x.`isEnabled` = 1 AND u.`isLockedOut` = 0 ORDER BY u.`creationDate` DESC LIMIT 0,10</value>
  </data>
  <data name="GetStatistics" xml:space="preserve">
    <value>SELECT (SELECT COUNT(q.`id`) FROM `products` q WHERE q.`isAvailable` = 1 AND q.`restaurantId` IN (SELECT e.`id` FROM `restaurants` e WHERE e.`isEnabled`=1)) AS produkty, (SELECT COUNT(w.`id`) FROM `restaurants` w WHERE w.`isEnabled` = 1) AS restauracje, (SELECT COUNT(t.`id`) FROM `users` t WHERE t.`isLockedOut` = 0 AND t.`comment` != 'R') AS osoby, (SELECT COUNT(r.`id`) FROM `users_in_roles` r JOIN `users` u ON r.`userID` = u.`id` WHERE r.`roleID` = 5 AND u.`isLockedOut`=0 AND (u.`lastActivityDate` &gt; @compareUser OR  u.`lastLoginDate` &gt; @compareUser)) AS klienciAkt, (SELECT COUNT(i.`id`) FROM `users_in_roles` i JOIN `users` o ON i.`userID` = o.`id` WHERE i.`roleID` = 4 AND o.`isLockedOut`=0 AND (o.`lastActivityDate` &gt; @compareRestaurant OR  o.`lastLoginDate` &gt; @compareRestaurant)) AS restauAkt</value>
  </data>
  <data name="GetEmployeesInRestaurant" xml:space="preserve">
    <value>SELECT u.`login` FROM `employees_in_restaurants` e JOIN `users` u ON e.`userId` = u.`id` JOIN `restaurants` r ON e.`restaurantId` = r.`id` WHERE u.`isLockedOut` = @isLockedOut AND r.`userId` = (SELECT x.`id` FROM `users` x WHERE x.`login` =@login)</value>
  </data>
</root>